/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.44
 * Generated at: 2018-07-26 00:26:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class googleMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("<style>\r\n");
      out.write("#map {\r\n");
      out.write("\tborder-radius: 50px;\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("}\r\n");
      out.write("/* Optional: Makes the sample page fill the window. */\r\n");
      out.write("html, body {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#pac-input {\r\n");
      out.write("\tbackground-color: #fff;\r\n");
      out.write("\tfont-family: Roboto;\r\n");
      out.write("\tfont-size: 15px;\r\n");
      out.write("\tfont-weight: 300;\r\n");
      out.write("\tvertical-align: bottom;\r\n");
      out.write("\tmargin-left: 12px;\r\n");
      out.write("\tpadding: 0 11px 0 13px;\r\n");
      out.write("\ttext-overflow: ellipsis;\r\n");
      out.write("\twidth: 400px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>너의 영화는</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"pac-card\" id=\"pac-card\">\r\n");
      out.write("\t\t<div id=\"pac-container\">\r\n");
      out.write("\t\t\t<input id=\"pac-input\" type=\"text\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("\t<div id=\"infowindow-content\"></div>\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDPzl09wPmTlQbQ6qkFf70tQoru1BB42f0&libraries=places&callback=initMap\"\r\n");
      out.write("\t\tasync defer></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t// This example requires the Places library. Include the libraries=places\r\n");
      out.write("\t\t// parameter when you first load the API. For example:\r\n");
      out.write("\t\t// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\r\n");
      out.write("\t\tfunction initMap() {\r\n");
      out.write("\t\t\tvar map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("\t\t\t\tcenter : {\r\n");
      out.write("\t\t\t\t\tlat : 35.865472,\r\n");
      out.write("\t\t\t\t\tlng : 128.593363\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tzoom : 13\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction getLocation() {\r\n");
      out.write("\t\t\t\tif (navigator.geolocation) { // GPS를 지원하면\r\n");
      out.write("\t\t\t\t\tnavigator.geolocation.getCurrentPosition(\r\n");
      out.write("\t\t\t\t\t\t\tfunction(position) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar darwin = new google.maps.LatLng(\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tposition.coords.latitude,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tposition.coords.longitude);\r\n");
      out.write("\t\t\t\t\t\t\t\tmap.setCenter(darwin);\r\n");
      out.write("\t\t\t\t\t\t\t}, function(error) {\r\n");
      out.write("\t\t\t\t\t\t\t\tconsole.error(error);\r\n");
      out.write("\t\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\t\tenableHighAccuracy : false,\r\n");
      out.write("\t\t\t\t\t\t\t\tmaximumAge : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\ttimeout : Infinity\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert('GPS를 지원하지 않습니다');\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tgetLocation();\r\n");
      out.write("\t\t\tvar card = document.getElementById('pac-card');\r\n");
      out.write("\t\t\tvar input = document.getElementById('pac-input');\r\n");
      out.write("\t\t\tvar types = document.getElementById('type-selector');\r\n");
      out.write("\t\t\tvar strictBounds = document\r\n");
      out.write("\t\t\t\t\t.getElementById('strict-bounds-selector');\r\n");
      out.write("\r\n");
      out.write("\t\t\tmap.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar autocomplete = new google.maps.places.Autocomplete(input);\r\n");
      out.write("\r\n");
      out.write("\t\t\t// Bind the map's bounds (viewport) property to the autocomplete object,\r\n");
      out.write("\t\t\t// so that the autocomplete requests use the current map bounds for the\r\n");
      out.write("\t\t\t// bounds option in the request.\r\n");
      out.write("\t\t\tautocomplete.bindTo('bounds', map);\r\n");
      out.write("\r\n");
      out.write("\t\t\t// Set the data fields to return when the user selects a place.\r\n");
      out.write("\t\t\tautocomplete.setFields([ 'address_components', 'geometry', 'icon',\r\n");
      out.write("\t\t\t\t\t'name' ]);\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar infowindow = new google.maps.InfoWindow();\r\n");
      out.write("\t\t\tvar infowindowContent = document\r\n");
      out.write("\t\t\t\t\t.getElementById('infowindow-content');\r\n");
      out.write("\t\t\tinfowindow.setContent(infowindowContent);\r\n");
      out.write("\t\t\tvar marker = new google.maps.Marker({\r\n");
      out.write("\t\t\t\tmap : map,\r\n");
      out.write("\t\t\t\tanchorPoint : new google.maps.Point(0, -29)\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tautocomplete\r\n");
      out.write("\t\t\t\t\t.addListener(\r\n");
      out.write("\t\t\t\t\t\t\t'place_changed',\r\n");
      out.write("\t\t\t\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t\t\t\tinfowindow.close();\r\n");
      out.write("\t\t\t\t\t\t\t\tmarker.setVisible(false);\r\n");
      out.write("\t\t\t\t\t\t\t\tvar place = autocomplete.getPlace();\r\n");
      out.write("\t\t\t\t\t\t\t\tif (!place.geometry) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// User entered the name of a Place that was not suggested and\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// pressed the Enter key, or the Place Details request failed.\r\n");
      out.write("\t\t\t\t\t\t\t\t\twindow\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t.alert(\"No details available for input: '\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t+ place.name + \"'\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t// If the place has a geometry, then present it on a map.\r\n");
      out.write("\t\t\t\t\t\t\t\tif (place.geometry.viewport) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmap.fitBounds(place.geometry.viewport);\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmap.setCenter(place.geometry.location);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmap.setZoom(17); // Why 17? Because it looks good.\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tmarker.setPosition(place.geometry.location);\r\n");
      out.write("\t\t\t\t\t\t\t\tmarker.setVisible(true);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvar address = '';\r\n");
      out.write("\t\t\t\t\t\t\t\tif (place.address_components) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\taddress = [\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t(place.address_components[0]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t&& place.address_components[0].short_name || ''),\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t(place.address_components[1]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t&& place.address_components[1].short_name || ''),\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t(place.address_components[2]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t&& place.address_components[2].short_name || '') ]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t.join(' ');\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tinfowindowContent.children['place-icon'].src = place.icon;\r\n");
      out.write("\t\t\t\t\t\t\t\tinfowindowContent.children['place-name'].textContent = place.name;\r\n");
      out.write("\t\t\t\t\t\t\t\tinfowindowContent.children['place-address'].textContent = address;\r\n");
      out.write("\t\t\t\t\t\t\t\tinfowindow.open(map, marker);\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t// Sets a listener on a radio button to change the filter type on Places\r\n");
      out.write("\t\t\t// Autocomplete.\r\n");
      out.write("\t\t\tfunction setupClickListener(id, types) {\r\n");
      out.write("\t\t\t\tvar radioButton = document.getElementById(id);\r\n");
      out.write("\t\t\t\tradioButton.addEventListener('click', function() {\r\n");
      out.write("\t\t\t\t\tautocomplete.setTypes(types);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tsetupClickListener('changetype-all', []);\r\n");
      out.write("\r\n");
      out.write("\t\t\tdocument.getElementById('use-strict-bounds').addEventListener(\r\n");
      out.write("\t\t\t\t\t'click',\r\n");
      out.write("\t\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t\tconsole.log('Checkbox clicked! New state='\r\n");
      out.write("\t\t\t\t\t\t\t\t+ this.checked);\r\n");
      out.write("\t\t\t\t\t\tautocomplete.setOptions({\r\n");
      out.write("\t\t\t\t\t\t\tstrictBounds : this.checked\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
